package code;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Line, Int, Float, Char, If, Else, Equal, Op_mathematic, While, Case,
    Op_logical, Op_relational, Op_increase, Parentheses_o, Parentheses_c, Colon,
    Braces_o, Braces_c, Brackets_o, Brackets_c, Semicolon, Identifier, Default,
    Number, Switch, Break, Literal, ERROR;
non terminal BEGIN, DECLARATION, RECURSIVE_DECLARATION, CONDITION, COMMANDS,
    RECURSIVE_ARRAY_DECLARATION, ARRAY_DECLARATION, IF, COMMANDS2, WHILE,
    SWITCH, CASE, CASE_TYPE, DEFAULT;

start with BEGIN;

BEGIN ::= 
    DECLARATION |
    IF |
    SWITCH |
    WHILE
;
DECLARATION ::= 
    Int Identifier RECURSIVE_DECLARATION | 
    Float Identifier RECURSIVE_DECLARATION |
    Char Identifier ARRAY_DECLARATION RECURSIVE_ARRAY_DECLARATION|
    Char Identifier RECURSIVE_ARRAY_DECLARATION
;
RECURSIVE_DECLARATION ::=
    Identifier RECURSIVE_DECLARATION |
    Semicolon
;
ARRAY_DECLARATION ::=
    Brackets_o Number Brackets_c
;
RECURSIVE_ARRAY_DECLARATION ::=
    Identifier ARRAY_DECLARATION RECURSIVE_ARRAY_DECLARATION |
    Identifier RECURSIVE_ARRAY_DECLARATION |
    Semicolon	
;
IF ::=
    If Parentheses_o CONDITION Parentheses_c Braces_o COMMANDS Braces_c |
    If Parentheses_o CONDITION Parentheses_c Braces_o COMMANDS Braces_c Else Braces_o COMMANDS Braces_c
;
CONDITION ::=
    Identifier Op_relational Number |
    Identifier Op_relational Identifier |
    Number Op_relational Number |
    Number Op_relational Identifier
;
COMMANDS ::=
    Identifier Equal Identifier Op_mathematic Identifier COMMANDS2 |
    Identifier Equal Identifier Op_mathematic Number COMMANDS2 |
    Identifier Equal Number Op_mathematic Number COMMANDS2 |
    Identifier Equal Number Op_mathematic Identifier COMMANDS2 |
    Identifier Op_increase COMMANDS2
;
COMMANDS2 ::=
    Semicolon Identifier Equal Identifier Op_mathematic Identifier COMMANDS2 |
    Semicolon Identifier Equal Identifier Op_mathematic Number COMMANDS2 |
    Semicolon Identifier Equal Number Op_mathematic Number COMMANDS2 |
    Semicolon Identifier Equal Number Op_mathematic Identifier COMMANDS2 |
    Semicolon Identifier Op_increase COMMANDS2 |
    Semicolon
;
WHILE ::= 
    While Parentheses_o CONDITION Parentheses_c Braces_o COMMANDS Braces_c
;
SWITCH ::= 
    Switch Parentheses_o Identifier Parentheses_c Braces_o CASE Braces_c |
    Switch Parentheses_o Identifier Parentheses_c Braces_o CASE DEFAULT Braces_c
;
CASE_TYPE ::=
    Number |
    Literal
;
CASE ::=
    Case CASE_TYPE Colon Braces_o COMMANDS Break Semicolon Braces_c CASE|
    Case CASE_TYPE Colon Braces_o COMMANDS Break Semicolon Braces_c |
    Case CASE_TYPE Colon CASE |
    Case Parentheses_o CASE_TYPE Parentheses_c Colon Braces_o COMMANDS Break Semicolon Braces_c CASE|
    Case Parentheses_o CASE_TYPE Parentheses_c Colon Braces_o COMMANDS Break Semicolon Braces_c |
    Case Parentheses_o CASE_TYPE Parentheses_c Colon CASE
;
DEFAULT ::=
    Default Colon Braces_o COMMANDS Braces_c
;