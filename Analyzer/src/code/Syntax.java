
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 28 18:55:49 BRT 2021
//----------------------------------------------------

package code;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 28 18:55:49 BRT 2021
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\006\000" +
    "\002\003\005\000\002\004\004\000\002\004\003\000\002" +
    "\010\005\000\002\007\005\000\002\007\004\000\002\007" +
    "\003\000\002\011\011\000\002\011\015\000\002\005\005" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\005\000\002\012\011\000\002" +
    "\012\011\000\002\012\011\000\002\012\011\000\002\012" +
    "\006\000\002\012\003\000\002\013\011\000\002\014\011" +
    "\000\002\014\012\000\002\016\003\000\002\016\003\000" +
    "\002\015\013\000\002\015\012\000\002\015\006\000\002" +
    "\015\015\000\002\015\014\000\002\015\010\000\002\017" +
    "\007\000\002\021\021\000\002\021\021\000\002\020\003" +
    "\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\020\005\013\006\006\007\012\010\007\014" +
    "\011\034\004\037\015\001\002\000\004\021\166\001\002" +
    "\000\004\002\ufffd\001\002\000\004\031\164\001\002\000" +
    "\004\021\152\001\002\000\004\002\ufffc\001\002\000\004" +
    "\021\144\001\002\000\004\031\130\001\002\000\004\031" +
    "\123\001\002\000\004\002\uffff\001\002\000\004\021\022" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\000\001" +
    "\002\000\004\002\021\001\002\000\004\002\001\001\002" +
    "\000\006\005\024\006\023\001\002\000\004\031\107\001" +
    "\002\000\004\031\025\001\002\000\004\012\026\001\002" +
    "\000\006\031\031\033\027\001\002\000\010\017\uffd5\022" +
    "\uffd5\030\uffd5\001\002\000\004\030\032\001\002\000\010" +
    "\017\uffd4\022\uffd4\030\uffd4\001\002\000\006\031\031\033" +
    "\027\001\002\000\004\017\105\001\002\000\004\030\035" +
    "\001\002\000\004\031\036\001\002\000\004\020\037\001" +
    "\002\000\004\022\040\001\002\000\004\024\041\001\002" +
    "\000\004\031\043\001\002\000\004\025\104\001\002\000" +
    "\006\012\044\020\045\001\002\000\006\031\071\033\070" +
    "\001\002\000\004\030\046\001\002\000\010\025\uffe4\031" +
    "\050\035\uffe4\001\002\000\006\025\uffea\035\uffea\001\002" +
    "\000\006\012\051\020\052\001\002\000\006\031\055\033" +
    "\054\001\002\000\004\030\046\001\002\000\006\025\uffe5" +
    "\035\uffe5\001\002\000\004\013\063\001\002\000\004\013" +
    "\056\001\002\000\006\031\060\033\057\001\002\000\004" +
    "\030\046\001\002\000\004\030\046\001\002\000\006\025" +
    "\uffe9\035\uffe9\001\002\000\006\025\uffe8\035\uffe8\001\002" +
    "\000\006\031\065\033\064\001\002\000\004\030\046\001" +
    "\002\000\004\030\046\001\002\000\006\025\uffe6\035\uffe6" +
    "\001\002\000\006\025\uffe7\035\uffe7\001\002\000\004\013" +
    "\077\001\002\000\004\013\072\001\002\000\006\031\074" +
    "\033\073\001\002\000\004\030\046\001\002\000\004\030" +
    "\046\001\002\000\006\025\uffee\035\uffee\001\002\000\006" +
    "\025\uffed\035\uffed\001\002\000\006\031\101\033\100\001" +
    "\002\000\004\030\046\001\002\000\004\030\046\001\002" +
    "\000\006\025\uffeb\035\uffeb\001\002\000\006\025\uffec\035" +
    "\uffec\001\002\000\004\002\uffd7\001\002\000\006\031\031" +
    "\033\027\001\002\000\006\022\uffef\030\uffef\001\002\000" +
    "\004\012\110\001\002\000\006\031\031\033\027\001\002" +
    "\000\004\030\112\001\002\000\006\031\031\033\027\001" +
    "\002\000\004\030\114\001\002\000\004\031\115\001\002" +
    "\000\004\020\116\001\002\000\004\022\117\001\002\000" +
    "\004\024\120\001\002\000\004\031\043\001\002\000\004" +
    "\025\122\001\002\000\004\002\uffd6\001\002\000\006\030" +
    "\125\031\126\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufff6\001\002\000\006\030\125\031\126\001\002\000" +
    "\004\002\ufff7\001\002\000\010\026\131\030\132\031\135" +
    "\001\002\000\004\033\142\001\002\000\004\002\ufff2\001" +
    "\002\000\006\030\132\031\135\001\002\000\004\002\ufff8" +
    "\001\002\000\010\026\131\030\132\031\135\001\002\000" +
    "\004\002\ufff3\001\002\000\006\030\132\031\135\001\002" +
    "\000\004\002\ufff4\001\002\000\004\002\ufff9\001\002\000" +
    "\004\027\143\001\002\000\006\030\ufff5\031\ufff5\001\002" +
    "\000\006\031\031\033\027\001\002\000\004\022\146\001" +
    "\002\000\004\024\147\001\002\000\004\031\043\001\002" +
    "\000\004\025\151\001\002\000\004\002\uffe3\001\002\000" +
    "\006\031\031\033\027\001\002\000\004\022\154\001\002" +
    "\000\004\024\155\001\002\000\004\031\043\001\002\000" +
    "\004\025\157\001\002\000\006\002\ufff1\011\160\001\002" +
    "\000\004\024\161\001\002\000\004\031\043\001\002\000" +
    "\004\025\163\001\002\000\004\002\ufff0\001\002\000\006" +
    "\030\125\031\126\001\002\000\004\002\ufffa\001\002\000" +
    "\004\031\167\001\002\000\004\022\170\001\002\000\004" +
    "\024\171\001\002\000\004\015\172\001\002\000\010\021" +
    "\206\033\204\036\207\001\002\000\006\025\176\032\175" +
    "\001\002\000\004\025\203\001\002\000\004\023\177\001" +
    "\002\000\004\002\uffe2\001\002\000\004\024\200\001\002" +
    "\000\004\031\043\001\002\000\004\025\202\001\002\000" +
    "\004\025\uffd8\001\002\000\004\002\uffe1\001\002\000\006" +
    "\022\uffe0\023\uffe0\001\002\000\004\023\222\001\002\000" +
    "\006\033\204\036\207\001\002\000\006\022\uffdf\023\uffdf" +
    "\001\002\000\004\022\211\001\002\000\004\023\212\001" +
    "\002\000\006\015\172\024\213\001\002\000\004\031\043" +
    "\001\002\000\006\025\uffd9\032\uffd9\001\002\000\004\035" +
    "\216\001\002\000\004\030\217\001\002\000\004\025\220" +
    "\001\002\000\010\015\172\025\uffda\032\uffda\001\002\000" +
    "\006\025\uffdb\032\uffdb\001\002\000\006\015\172\024\223" +
    "\001\002\000\004\031\043\001\002\000\006\025\uffdc\032" +
    "\uffdc\001\002\000\004\035\226\001\002\000\004\030\227" +
    "\001\002\000\004\025\230\001\002\000\010\015\172\025" +
    "\uffdd\032\uffdd\001\002\000\006\025\uffde\032\uffde\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\016\002\017\003\016\011\013\013\004\014" +
    "\015\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\033\020\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\061\001\001" +
    "\000\004\012\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\066\001\001\000\004" +
    "\012\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\075\001\001\000\004\012\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\102" +
    "\001\001\000\004\012\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\110\001" +
    "\001\000\002\001\001\000\006\005\112\020\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\126" +
    "\001\001\000\002\001\001\000\006\007\133\010\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\140" +
    "\001\001\000\002\001\001\000\006\007\135\010\136\001" +
    "\001\000\002\001\001\000\004\007\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\144\020\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\152\020\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\172\001\001\000\004\016\204\001\001\000\004\017\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\213\001\001\000\004\006\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\220\001\001\000\002\001\001\000\004\015\223" +
    "\001\001\000\004\006\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\230\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMMANDS_TYPE ::= Identifier 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS_TYPE",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMMANDS_TYPE ::= Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS_TYPE",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= For Parentheses_o Float Identifier Equal COMMANDS_TYPE Semicolon CONDITION Semicolon Identifier Op_increase Parentheses_c Braces_o COMMANDS Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR ::= For Parentheses_o Int Identifier Equal COMMANDS_TYPE Semicolon CONDITION Semicolon Identifier Op_increase Parentheses_c Braces_o COMMANDS Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEFAULT ::= Default Colon Braces_o COMMANDS Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASE ::= Case Parentheses_o CASE_TYPE Parentheses_c Colon CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASE ::= Case Parentheses_o CASE_TYPE Parentheses_c Colon Braces_o COMMANDS Break Semicolon Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASE ::= Case Parentheses_o CASE_TYPE Parentheses_c Colon Braces_o COMMANDS Break Semicolon Braces_c CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASE ::= Case CASE_TYPE Colon CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASE ::= Case CASE_TYPE Colon Braces_o COMMANDS Break Semicolon Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASE ::= Case CASE_TYPE Colon Braces_o COMMANDS Break Semicolon Braces_c CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASE_TYPE ::= CharName 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE_TYPE",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASE_TYPE ::= Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE_TYPE",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SWITCH ::= Switch Parentheses_o Identifier Parentheses_c Braces_o CASE DEFAULT Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SWITCH ::= Switch Parentheses_o Identifier Parentheses_c Braces_o CASE Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILE ::= While Parentheses_o CONDITION Parentheses_c Braces_o COMMANDS Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMMANDS2 ::= Semicolon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS2",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMMANDS2 ::= Semicolon Identifier Op_increase COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS2",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COMMANDS2 ::= Semicolon Identifier Equal Number Op_mathematic Identifier COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS2",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMMANDS2 ::= Semicolon Identifier Equal Number Op_mathematic Number COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS2",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMMANDS2 ::= Semicolon Identifier Equal Identifier Op_mathematic Number COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS2",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMMANDS2 ::= Semicolon Identifier Equal Identifier Op_mathematic Identifier COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS2",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMMANDS ::= Identifier Op_increase COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMMANDS ::= Identifier Equal Number Op_mathematic Identifier COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMMANDS ::= Identifier Equal Number Op_mathematic Number COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMMANDS ::= Identifier Equal Identifier Op_mathematic Number COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COMMANDS ::= Identifier Equal Identifier Op_mathematic Identifier COMMANDS2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COMMANDS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONDITION ::= COMMANDS_TYPE Op_relational COMMANDS_TYPE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IF ::= If Parentheses_o CONDITION Parentheses_c Braces_o COMMANDS Braces_c Else Braces_o COMMANDS Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IF ::= If Parentheses_o CONDITION Parentheses_c Braces_o COMMANDS Braces_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RECURSIVE_ARRAY_DECLARATION ::= Semicolon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECURSIVE_ARRAY_DECLARATION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RECURSIVE_ARRAY_DECLARATION ::= Identifier RECURSIVE_ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECURSIVE_ARRAY_DECLARATION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RECURSIVE_ARRAY_DECLARATION ::= Identifier ARRAY_DECLARATION RECURSIVE_ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECURSIVE_ARRAY_DECLARATION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARRAY_DECLARATION ::= Brackets_o Number Brackets_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RECURSIVE_DECLARATION ::= Semicolon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECURSIVE_DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RECURSIVE_DECLARATION ::= Identifier RECURSIVE_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECURSIVE_DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= Char Identifier RECURSIVE_ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= Char Identifier ARRAY_DECLARATION RECURSIVE_ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= Float Identifier RECURSIVE_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATION ::= Int Identifier RECURSIVE_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BEGIN ::= FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BEGIN ::= WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BEGIN ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BEGIN ::= IF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

